{"version":3,"sources":["shader.js"],"names":["loader_VS","loader_FS"],"mappings":";;AAAA,IAAMA,SAAS,ipCAAf;AAkDA,IAAMC,SAAS,4kEAAf","sourcesContent":["const loader_VS = `#version 300 es\r\n\r\n// you can make in vec4 a_position; glsl will add more data than pointer point with 1.0\r\n\r\nin vec3 a_position;\r\nin vec3 a_color;\r\nin vec3 a_normal;\r\nin vec3 a_tangent;\r\nin vec3 a_bitangent;\r\nin vec2 a_texCord;\r\n\r\nout vec3 v_position;\r\nout vec3 v_color;\r\nout vec3 v_normalWorld;\r\nout vec3 surfaceView;\r\nout vec3 lightDirection;\r\nout vec2 v_texCord;\r\n\r\nout vec3 tangentWorld;\r\n\r\nuniform mat4 u_modelMatrix;\r\nuniform mat4 u_vpMatrix;\r\n\r\nuniform mat4 u_worldNormal;\r\n\r\nuniform vec3 u_cameraWorld;\r\n\r\nuniform float u_scale;\r\n\r\nvoid main(){\r\n\r\n    v_position = a_position;\r\n    vec4 worldPosition = u_modelMatrix*vec4(a_position, 1.0);\r\n    mat3 modelMatrix3x3 = mat3(u_worldNormal);\r\n   \r\n    tangentWorld = modelMatrix3x3 * a_tangent ;\r\n    vec3 biTangentWorld = modelMatrix3x3 * a_bitangent; \r\n    v_normalWorld = (modelMatrix3x3*a_normal);\r\n\r\n    // mat3 TBN = mat3( tangentWorld, biTangentWorld, v_normalWorld);\r\n    // mat3 invTBN = transpose(TBN);\r\n\r\n    surfaceView = (u_cameraWorld- vec3(worldPosition));\r\n    \r\n    v_color = a_color;\r\n    v_texCord = a_texCord;\r\n    gl_Position = u_vpMatrix*u_modelMatrix*vec4(a_position*u_scale, 1.0);\r\n}\r\n`;\r\n\r\nconst loader_FS = `#version 300 es\r\n\r\n#if GL_FRAGMENT_PRECISION_HIGH\r\n    precision highp float;\r\n#else \r\n    precision mediump float;\r\n#endif\r\n\r\nin vec3 v_position;\r\nin vec3 v_color;\r\nin vec2 v_texCord;\r\nin vec3 v_normalWorld;\r\nin vec3 surfaceView;\r\nin vec3 lightDirection;\r\n\r\nin vec3 tangentWorld;\r\nout vec4 outColor;\r\n\r\nuniform vec3 ambient;\r\nuniform vec3 diffuse;\r\nuniform vec3 specular;\r\n\r\nuniform sampler2D diffuseSampler;\r\nuniform sampler2D normalSampler;\r\nuniform sampler2D specularSampler;\r\n\r\nuniform vec3 u_lightDirection;\r\n\r\nuniform vec3 emmisive;\r\nuniform float shininess;\r\nuniform float opacity;\r\nuniform vec3 u_ambientLight;\r\n\r\nuniform bool hasNormal;\r\n\r\nvoid main(){\r\n\r\n    vec3 normal = normalize(v_normalWorld);\r\n    vec3 tangent = normalize(tangentWorld);\r\n    vec3 biTangent = normalize(cross(normal, tangent));\r\n\r\n    mat3 TBN = mat3(tangent, biTangent, normal);\r\n\r\n    vec3 viewDirection = normalize(surfaceView);\r\n\r\n    vec3 lightDirectionNormalized = normalize(u_lightDirection);\r\n\r\n    vec3 normalDirection = 2.0*(texture(normalSampler, v_texCord).rgb)-1.0;\r\n    normalDirection = normalize(TBN*normalDirection);\r\n\r\n    vec3 ambientLight =ambient*u_ambientLight;\r\n\r\n    vec3 directionalLight = vec3(0.8, 0.8, 0.8);    \r\n\r\n    float lambertianFactor = clamp(dot(normal, lightDirectionNormalized), 0.0, 1.0);\r\n    vec3 diffuseTextureData = texture(diffuseSampler, v_texCord).rgb;\r\n    vec3 effectiveDiffuse = diffuseTextureData*diffuse*lambertianFactor*directionalLight;    \r\n    effectiveDiffuse = diffuseTextureData*diffuse*lambertianFactor;\r\n\r\n    vec3 halfVector = normalize(lightDirectionNormalized + viewDirection);\r\n    float specularLight = clamp(dot(halfVector, normal), 0.0, 1.0);\r\n    vec3 specularTextureData = texture(specularSampler, v_texCord).rgb;\r\n    vec3 effectiveSpecular = specularTextureData*specular*pow(specularLight, shininess);\r\n\r\n    outColor = vec4( emmisive+ ambientLight + effectiveDiffuse + effectiveSpecular, 1.0);\r\n    // outColor = vec4(1.0,1.0,1.0, 0.5); \r\n    // diffuseTextureData = texture(diffuseSampler, v_texCord).rgb;\r\n    // outColor = vec4(diffuseTextureData, 1.0);\r\n\r\n}\r\n`;\r\n"],"file":"shader.dev.js"}