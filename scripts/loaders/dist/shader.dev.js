"use strict";

var loader_VS = "#version 300 es\n\n// you can make in vec4 a_position; glsl will add more data than pointer point with 1.0\n\nin vec3 a_position;\nin vec3 a_color;\nin vec3 a_normal;\nin vec3 a_tangent;\nin vec3 a_bitangent;\nin vec2 a_texCord;\n\nout vec3 v_position;\nout vec3 v_color;\nout vec3 v_normalWorld;\nout vec3 surfaceView;\nout vec3 lightDirection;\nout vec2 v_texCord;\n\nout vec3 tangentWorld;\n\nuniform mat4 u_modelMatrix;\nuniform mat4 u_vpMatrix;\n\nuniform mat4 u_worldNormal;\n\nuniform vec3 u_cameraWorld;\n\nuniform float u_scale;\n\nvoid main(){\n\n    v_position = a_position;\n    vec4 worldPosition = u_modelMatrix*vec4(a_position, 1.0);\n    mat3 modelMatrix3x3 = mat3(u_worldNormal);\n   \n    tangentWorld = modelMatrix3x3 * a_tangent ;\n    vec3 biTangentWorld = modelMatrix3x3 * a_bitangent; \n    v_normalWorld = (modelMatrix3x3*a_normal);\n\n    // mat3 TBN = mat3( tangentWorld, biTangentWorld, v_normalWorld);\n    // mat3 invTBN = transpose(TBN);\n\n    surfaceView = (u_cameraWorld- vec3(worldPosition));\n    \n    v_color = a_color;\n    v_texCord = a_texCord;\n    gl_Position = u_vpMatrix*u_modelMatrix*vec4(a_position*u_scale, 1.0);\n}\n";
var loader_FS = "#version 300 es\n\n#if GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else \n    precision mediump float;\n#endif\n\nin vec3 v_position;\nin vec3 v_color;\nin vec2 v_texCord;\nin vec3 v_normalWorld;\nin vec3 surfaceView;\nin vec3 lightDirection;\n\nin vec3 tangentWorld;\nout vec4 outColor;\n\nuniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 specular;\n\nuniform sampler2D diffuseSampler;\nuniform sampler2D normalSampler;\nuniform sampler2D specularSampler;\n\nuniform vec3 u_lightDirection;\n\nuniform vec3 emmisive;\nuniform float shininess;\nuniform float opacity;\nuniform vec3 u_ambientLight;\n\nuniform bool hasNormal;\n\nvoid main(){\n\n    vec3 normal = normalize(v_normalWorld);\n    vec3 tangent = normalize(tangentWorld);\n    vec3 biTangent = normalize(cross(normal, tangent));\n\n    mat3 TBN = mat3(tangent, biTangent, normal);\n\n    vec3 viewDirection = normalize(surfaceView);\n\n    vec3 lightDirectionNormalized = normalize(u_lightDirection);\n\n    vec3 normalDirection = 2.0*(texture(normalSampler, v_texCord).rgb)-1.0;\n    normalDirection = normalize(TBN*normalDirection);\n\n    vec3 ambientLight =ambient*u_ambientLight;\n\n    vec3 directionalLight = vec3(0.8, 0.8, 0.8);    \n\n    float lambertianFactor = clamp(dot(normal, lightDirectionNormalized), 0.0, 1.0);\n    vec3 diffuseTextureData = texture(diffuseSampler, v_texCord).rgb;\n    vec3 effectiveDiffuse = diffuseTextureData*diffuse*lambertianFactor*directionalLight;    \n    effectiveDiffuse = diffuseTextureData*diffuse*lambertianFactor;\n\n    vec3 halfVector = normalize(lightDirectionNormalized + viewDirection);\n    float specularLight = clamp(dot(halfVector, normal), 0.0, 1.0);\n    vec3 specularTextureData = texture(specularSampler, v_texCord).rgb;\n    vec3 effectiveSpecular = specularTextureData*specular*pow(specularLight, shininess);\n\n    outColor = vec4( emmisive+ ambientLight + effectiveDiffuse + effectiveSpecular, 1.0);\n    // outColor = vec4(1.0,1.0,1.0, 0.5); \n    // diffuseTextureData = texture(diffuseSampler, v_texCord).rgb;\n    // outColor = vec4(diffuseTextureData, 1.0);\n\n}\n";
//# sourceMappingURL=shader.dev.js.map
