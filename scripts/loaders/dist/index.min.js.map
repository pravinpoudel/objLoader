{"version":3,"sources":["index.js"],"names":["_webglutility","require","canvas","gl","_ref","geometries","materials","minMax","program","positionLocation","vertexColorLocation","normalLocation","texCordinateLocation","tangentLocation","modelMatrixLocation","viewProjectionLocation","scaleLocation","normalMatrixLocation","cameraLocation","lightLocation","ambientLocation","diffuseLocation","specularLocation","emmisiveLocation","shininessLocation","opacityLocation","diffuseSamplerLocation","normalSamplerLocation","specularSamplerLocation","hasNormalLocation","ambientlightLocation","minValue","maxValue","range","maxSideLength","vao","cameraAngle","modelAngle","distanceScale","bufferLists","regeneratorRuntime","async","_context","prev","next","getAttribLocation","width","biTangentLocation","getUniformLocation","yRotation","clientWidth","m4","subtractVectors","offSet","createVertexArray","cameraMatrix","uniform3fv","positionBuffer","vProjectionMatrix","localPosition","multiply","projectionMatrix","position","bufferData","Float32Array","bindBuffer","_ref2","index","colorBuffer","tangentBuffer","biTangentBuffer","ambient","biTangent","geometry","diffuse","ARRAY_BUFFER","emmisive","material","shininess","textureBuffer","FLOAT","enableVertexAttribArray","vertexAttribPointer","window","requestAnimationFrame","specular","uniform1f","parseFloat","opacity","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","normalMap","TEXTURE1","diffuseMap","TEXTURE2","specularMap","uniform1i","drawArrays","TRIANGLES","length","draw","document","getElementById","getContext","console","log","abrupt","awrap","objFileLoader","sent","webglUtility","createProgramFromShaderVariable","loader_VS","loader_FS","useProgram","resizeCanvas","height","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","DEPTH_TEST","modelMatrix","uniformMatrix4fv","normalInverseMatrix","inverse","Math","PI","perspective","aspect","viewMatrix","normalBuffer","min","addVectors","scaleVector","bindVertexArray","map","vColor","normalData","attributes","normalCord","createBuffer","tangentVector","STATIC_DRAW","stop"],"mappings":"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","file":"index.min.js","sourcesContent":["import { webglUtility } from \"../utility/webglutility.js\";\r\n\r\n(async function () {\r\n  const canvas = document.getElementById(\"main-canvas\");\r\n  let gl = canvas.getContext(\"webgl2\");\r\n  if (!gl) {\r\n    console.log(\"context couldnot be generated\");\r\n    return;\r\n  }\r\n  let { geometries, materials, minMax } = await objFileLoader(gl);\r\n  console.log(geometries);\r\n\r\n  let program = webglUtility.createProgramFromShaderVariable(\r\n    gl,\r\n    loader_VS,\r\n    loader_FS\r\n  );\r\n  gl.useProgram(program);\r\n\r\n  let positionLocation = gl.getAttribLocation(program, \"a_position\");\r\n  let vertexColorLocation = gl.getAttribLocation(program, \"a_color\");\r\n  let normalLocation = gl.getAttribLocation(program, \"a_normal\");\r\n  let texCordinateLocation = gl.getAttribLocation(program, \"a_texCord\");\r\n  let tangentLocation = gl.getAttribLocation(program, \"a_tangent\");\r\n  let biTangentLocation = gl.getAttribLocation(program, \"a_bitangent\");\r\n\r\n  let modelMatrixLocation = gl.getUniformLocation(program, \"u_modelMatrix\");\r\n  let viewProjectionLocation = gl.getUniformLocation(program, \"u_vpMatrix\");\r\n  let scaleLocation = gl.getUniformLocation(program, \"u_scale\");\r\n  let normalMatrixLocation = gl.getUniformLocation(program, \"u_worldNormal\");\r\n  let cameraLocation = gl.getUniformLocation(program, \"u_cameraWorld\");\r\n  let lightLocation = gl.getUniformLocation(program, \"u_lightDirection\");\r\n  let ambientLocation = gl.getUniformLocation(program, \"ambient\");\r\n  let diffuseLocation = gl.getUniformLocation(program, \"diffuse\");\r\n  let specularLocation = gl.getUniformLocation(program, \"specular\");\r\n  let emmisiveLocation = gl.getUniformLocation(program, \"emmisive\");\r\n  let shininessLocation = gl.getUniformLocation(program, \"shininess\");\r\n  let opacityLocation = gl.getUniformLocation(program, \"opacity\");\r\n\r\n  let diffuseSamplerLocation = gl.getUniformLocation(program, \"diffuseSampler\");\r\n  let normalSamplerLocation = gl.getUniformLocation(program, \"normalSampler\");\r\n  let specularSamplerLocation = gl.getUniformLocation(\r\n    program,\r\n    \"specularSampler\"\r\n  );\r\n\r\n  let hasNormalLocation = gl.getUniformLocation(program, \"hasNormal\");\r\n\r\n  let ambientlightLocation = gl.getUniformLocation(program, \"u_ambientLight\");\r\n\r\n  // find the range and extend of an object to calculate the offset to properly view the object\r\n\r\n  let { min: minValue, max: maxValue } = minMax;\r\n  const range = m4.subtractVectors(maxValue, minValue);\r\n  const maxSideLength = m4.length(range);\r\n  const offSet = m4.scaleVector(\r\n    m4.addVectors(minValue, m4.scaleVector(range, 0.5)),\r\n    -1.0\r\n  );\r\n\r\n  // -----------------------------------------------\r\n  let vao = gl.createVertexArray();\r\n  gl.bindVertexArray(vao);\r\n  let cameraAngle = 0.0;\r\n  let modelAngle = 0.5;\r\n  let distanceScale = 0.6;\r\n\r\n  let bufferLists = geometries.map((geometry, index) => {\r\n    let positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n    let localPosition = geometry.attributes.position;\r\n\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array([...localPosition]),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    let vColor = geometry.attributes.colorValue;\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vColor), gl.STATIC_DRAW);\r\n\r\n    let normalData = geometry.attributes.normalCord;\r\n    let normalBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array(normalData),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let textureCord = geometry.attributes.textCord;\r\n    let textureBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, textureBuffer);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array(textureCord),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let tangentVector = geometry.tangents;\r\n    let tangentBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n    gl.bufferData(\r\n      gl.ARRAY_BUFFER,\r\n      new Float32Array(tangentVector),\r\n      gl.STATIC_DRAW\r\n    );\r\n\r\n    let biTangent = geometry.biTangent;\r\n    let biTangentBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, biTangentBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(biTangent), gl.STATIC_DRAW);\r\n\r\n    let material = geometry.material;\r\n    return {\r\n      positionBuffer,\r\n      colorBuffer,\r\n      normalBuffer,\r\n      textureBuffer,\r\n      tangentBuffer,\r\n      biTangentBuffer,\r\n      length: localPosition.length,\r\n      material: materials[material],\r\n    };\r\n  });\r\n\r\n  gl.uniform3fv(lightLocation, [10.0, 10.0, 50.0]);\r\n  gl.uniform3fv(ambientlightLocation, [0.2, 0.2, 0.2]);\r\n  gl.uniform1i(hasNormalLocation, 0);\r\n\r\n  function draw() {\r\n    webglUtility.resizeCanvas(gl.canvas);\r\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\r\n\r\n    gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);\r\n    gl.enable(gl.DEPTH_TEST);\r\n    // gl.enable(gl.CULL_FACE);\r\n    gl.clearColor(0.1, 0.1, 0.1, 0.3);\r\n\r\n    modelAngle += 0.008;\r\n    let modelMatrix = m4.yRotation(modelAngle);\r\n    gl.uniformMatrix4fv(modelMatrixLocation, false, modelMatrix);\r\n\r\n    let normalInverseMatrix = m4.inverse(modelMatrix);\r\n    gl.uniformMatrix4fv(normalMatrixLocation, true, normalInverseMatrix);\r\n\r\n    let aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n    let fov = (Math.PI / 180) * 60;\r\n    let projectionMatrix = m4.perspective(fov, aspect, 0.1, 1000);\r\n\r\n    gl.uniform1f(scaleLocation, 0.5);\r\n\r\n    cameraAngle += 0.0;\r\n    let cameraMatrix = m4.yRotation(cameraAngle);\r\n    cameraMatrix = m4.translate(\r\n      cameraMatrix,\r\n      0.0,\r\n      0.1,\r\n      maxSideLength * distanceScale\r\n    );\r\n    let cameraPosition = [cameraMatrix[12], cameraMatrix[13], cameraMatrix[14]];\r\n    // cameraMatrix = m4.lookAt(cameraPosition, [0.0, 0.0, 0.0], [0.0, 1.0, 0.0]);\r\n    viewMatrix = m4.inverse(cameraMatrix);\r\n\r\n    gl.uniform3fv(cameraLocation, cameraPosition);\r\n\r\n    let vProjectionMatrix = m4.multiply(projectionMatrix, viewMatrix);\r\n    gl.uniformMatrix4fv(viewProjectionLocation, false, vProjectionMatrix);\r\n\r\n    bufferLists.forEach(\r\n      (\r\n        {\r\n          positionBuffer,\r\n          colorBuffer,\r\n          normalBuffer,\r\n          textureBuffer,\r\n          tangentBuffer,\r\n          biTangentBuffer,\r\n          material,\r\n          length,\r\n        },\r\n        index\r\n      ) => {\r\n        const {\r\n          ambient = [1.0, 1.0, 1.0],\r\n          diffuse = [0.8, 0.87, 0.8],\r\n          opticalDensity = 1.0,\r\n          specular = [0.0, 0.0, 0.0],\r\n          emmisive = [0.0, 0.0, 0.0],\r\n          shininess = 1.0,\r\n          opacity = 1.0,\r\n        } = material;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n        gl.enableVertexAttribArray(positionLocation);\r\n        gl.vertexAttribPointer(positionLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, normalBuffer);\r\n        gl.enableVertexAttribArray(normalLocation);\r\n        gl.vertexAttribPointer(normalLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n        gl.enableVertexAttribArray(vertexColorLocation);\r\n        gl.vertexAttribPointer(vertexColorLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, textureBuffer);\r\n        gl.enableVertexAttribArray(texCordinateLocation);\r\n        gl.vertexAttribPointer(texCordinateLocation, 2, gl.FLOAT, false, 0, 0);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, tangentBuffer);\r\n        gl.enableVertexAttribArray(tangentLocation);\r\n        gl.vertexAttribPointer(tangentLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, biTangentBuffer);\r\n        // gl.enableVertexAttribArray(biTangentLocation);\r\n        // gl.vertexAttribPointer(biTangentLocation, 3, gl.FLOAT, false, 0, 0);\r\n\r\n        // material value\r\n        gl.uniform3fv(ambientLocation, ambient);\r\n        gl.uniform3fv(diffuseLocation, diffuse);\r\n        // gl.uniform3fv(ambientLocation, opticalDensity);\r\n        gl.uniform3fv(specularLocation, specular);\r\n        gl.uniform3fv(emmisiveLocation, emmisive);\r\n        gl.uniform1f(opacityLocation, parseFloat(opacity));\r\n        gl.uniform1f(shininessLocation, shininess);\r\n\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        gl.bindTexture(gl.TEXTURE_2D, material.normalMap);\r\n\r\n        gl.activeTexture(gl.TEXTURE1);\r\n        gl.bindTexture(gl.TEXTURE_2D, material.diffuseMap);\r\n\r\n        gl.activeTexture(gl.TEXTURE2);\r\n        gl.bindTexture(gl.TEXTURE_2D, material.specularMap);\r\n\r\n        // texture mapping\r\n        gl.uniform1i(normalSamplerLocation, 0);\r\n        gl.uniform1i(diffuseSamplerLocation, 1);\r\n        gl.uniform1i(specularSamplerLocation, 2);\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, length / 3);\r\n      }\r\n    );\r\n    window.requestAnimationFrame(draw);\r\n  }\r\n  window.requestAnimationFrame(draw);\r\n})();\r\n"]}