{"version":3,"sources":["webglutility.js"],"names":["createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","Error","String","createProgramFromShaderVariable","vertexShaderSource","fragmentShaderSource","program","createProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","errorInfo","getProgramInfoLog","resizeCanvas","canvas","clientHeight","clientWidth","width","height","webglUtility"],"mappings":";;;;;;;AAAA,SAASA,YAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwC;AACtC,MAAIC,MAAM,GAAGH,EAAE,CAACD,YAAH,CAAgBE,IAAhB,CAAb;AACAD,EAAAA,EAAE,CAACI,YAAH,CAAgBD,MAAhB,EAAwBD,MAAxB;AACAF,EAAAA,EAAE,CAACK,aAAH,CAAiBF,MAAjB;;AACA,MAAI,CAACH,EAAE,CAACM,kBAAH,CAAsBH,MAAtB,EAA8BH,EAAE,CAACO,cAAjC,CAAL,EAAuD;AACrD,QAAIC,IAAI,GAAGR,EAAE,CAACS,gBAAH,CAAoBN,MAApB,CAAX;AACA,UAAM,IAAIO,KAAJ,CAAUC,MAAM,CAACH,IAAD,CAAhB,CAAN;AACD;;AACD,SAAOL,MAAP;AACD;;AAED,SAASS,+BAAT,CACEZ,EADF,EAEEa,kBAFF,EAGEC,oBAHF,EAIE;AACA,MAAMC,OAAO,GAAGf,EAAE,CAACgB,aAAH,EAAhB;AACA,MAAMC,YAAY,GAAGlB,YAAY,CAACC,EAAD,EAAKA,EAAE,CAACkB,aAAR,EAAuBL,kBAAvB,CAAjC;AACA,MAAMM,cAAc,GAAGpB,YAAY,CACjCC,EADiC,EAEjCA,EAAE,CAACoB,eAF8B,EAGjCN,oBAHiC,CAAnC;AAKAd,EAAAA,EAAE,CAACqB,YAAH,CAAgBN,OAAhB,EAAyBE,YAAzB;AACAjB,EAAAA,EAAE,CAACqB,YAAH,CAAgBN,OAAhB,EAAyBI,cAAzB;AACAnB,EAAAA,EAAE,CAACsB,WAAH,CAAeP,OAAf;;AAEA,MAAI,CAACf,EAAE,CAACuB,mBAAH,CAAuBR,OAAvB,EAAgCf,EAAE,CAACwB,WAAnC,CAAL,EAAsD;AACpD,QAAIC,SAAS,GAAGzB,EAAE,CAAC0B,iBAAH,CAAqBX,OAArB,CAAhB;AACA,yDAA8CU,SAA9C;AACD;;AACD,SAAOV,OAAP;AACD;;AAED,SAASY,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIC,YAAY,GAAGD,MAAM,CAACC,YAA1B;AACA,MAAIC,WAAW,GAAGF,MAAM,CAACE,WAAzB;AAEA,MAAIC,KAAK,GAAGH,MAAM,CAACG,KAAnB;AACA,MAAIC,MAAM,GAAGJ,MAAM,CAACI,MAApB;;AAEA,MAAIH,YAAY,KAAKG,MAAjB,IAA2BF,WAAW,KAAKC,KAA/C,EAAsD;AACpDH,IAAAA,MAAM,CAACG,KAAP,GAAeD,WAAf;AACAF,IAAAA,MAAM,CAACI,MAAP,GAAgBH,YAAhB;AACD;AACF;;AAED,IAAMI,YAAY,GAAG;AACnBrB,EAAAA,+BAA+B,EAA/BA,+BADmB;AAEnBe,EAAAA,YAAY,EAAZA;AAFmB,CAArB;eAKeM,Y","sourcesContent":["function createShader(gl, type, source) {\r\n  let shader = gl.createShader(type);\r\n  gl.shaderSource(shader, source);\r\n  gl.compileShader(shader);\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    let info = gl.getShaderInfoLog(shader);\r\n    throw new Error(String(info));\r\n  }\r\n  return shader;\r\n}\r\n\r\nfunction createProgramFromShaderVariable(\r\n  gl,\r\n  vertexShaderSource,\r\n  fragmentShaderSource\r\n) {\r\n  const program = gl.createProgram();\r\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\r\n  const fragmentShader = createShader(\r\n    gl,\r\n    gl.FRAGMENT_SHADER,\r\n    fragmentShaderSource\r\n  );\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n  gl.linkProgram(program);\r\n\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    let errorInfo = gl.getProgramInfoLog(program);\r\n    throw `couldnot compile the program because ${errorInfo}`;\r\n  }\r\n  return program;\r\n}\r\n\r\nfunction resizeCanvas(canvas) {\r\n  let clientHeight = canvas.clientHeight;\r\n  let clientWidth = canvas.clientWidth;\r\n\r\n  let width = canvas.width;\r\n  let height = canvas.height;\r\n\r\n  if (clientHeight !== height || clientWidth !== width) {\r\n    canvas.width = clientWidth;\r\n    canvas.height = clientHeight;\r\n  }\r\n}\r\n\r\nconst webglUtility = {\r\n  createProgramFromShaderVariable,\r\n  resizeCanvas,\r\n};\r\n\r\nexport default webglUtility;\r\n"],"file":"webglutility.dev.js"}