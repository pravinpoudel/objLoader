{"version":3,"sources":["objloader.js"],"names":["matLib","geometries","objFileLoader","gl","objLoader","geometryRange","getRange","materialLoader","subArray","mulArray","computeTangent","geometry","positions","attributes","position","texCoordinate","texCord","verticesCount","i","len","length","v0","slice","v1","v2","uv0","uv1","uv2","E1","E2","delUV1","delUV2","ifactor","tangent","biTangent","tangents","push","a","b","map","value","index","createDefaultTexture","checkPowerOf2","loadImage","textureLoader","textureList","texture","materialLists","Object","values","materials","forEach","material","entries","filter","endsWith","textureName","textureImage","console","log","texturemapped","imageURL","URL","url","href","image","Image","src","crossOrigin","onload","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","ceil","Math","log2","floor","createTexture","Uint8Array","keywords","newmtl","data","Ns","shininess","Number","Ka","ambient","Kd","diffuse","Ks","specular","Ke","emissive","Ni","opticalDensity","d","opacity","illum","map_Kd","diffuseMap","map_Bump","normalMap","map_Normal","map_Ns","specularMap","window","location","materialURL","fetch","text","response","lines","split","regexKeyword","trim","startsWith","result","exec","keyword","unparsedvalued","datas","handler","reduce","min","max","vertexPosition","minMax","Array","fill","POSITIVE_INFINITY","NEGATIVE_INFINITY","j","toNumber","addVertex","resetGeometry","setGeometry","normalCord","colorValue","webglData","group","undefined","indices","vertexData","vertexColor","tempUrl","object","verticesIndices","positionCordinate","textureCordinate","normalCordinate","addMethods","v","vt","vn","f","traingleCount","mtllib","usemtl","o","line","unparsedArgs","handlerFunction"],"mappings":"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","sourcesContent":["let matLib;\r\nlet geometries = [];\r\n\r\nasync function objFileLoader(gl) {\r\n  async function objLoader() {\r\n    let tempUrl =\r\n      \"/game/resources/models/objs/envy-invidia/source/3D_MNK_XII_A_839_Zawisc.obj\";\r\n    // tempUrl =\r\n    //   \"https://webglfundamentals.org/webgl/resources/models/windmill/windmill.obj\";\r\n    const response = await fetch(tempUrl);\r\n    const text = await response.text();\r\n    const lines = text.split(\"\\n\");\r\n    const regexKeyword = /(\\w*)(?: )*(.*)/;\r\n    let material = \"basic\";\r\n    let object = \"default\";\r\n    let group = \"\";\r\n    let verticesIndices = [];\r\n\r\n    let geometry;\r\n\r\n    let webglData = [[], [], [], []];\r\n\r\n    let positionCordinate = [[0, 0, 0]];\r\n    let textureCordinate = [[0, 0]];\r\n    let normalCordinate = [[0, 0, 0]];\r\n    let vertexColor = [[0, 0, 0]];\r\n\r\n    let vertexData = [\r\n      positionCordinate,\r\n      textureCordinate,\r\n      normalCordinate,\r\n      vertexColor,\r\n    ];\r\n\r\n    function toNumber(a) {\r\n      return a.map((value) => Number(value));\r\n    }\r\n\r\n    function addVertex(data) {\r\n      let indices = data.split(\"/\");\r\n      indices.forEach((index, i) => {\r\n        if (!index) {\r\n          return;\r\n        }\r\n        index = index > 0 ? index : index + vertexData[i].length;\r\n        webglData[i].push(...toNumber(vertexData[i][index]));\r\n        // add color value of that vertex which is i=0 to the webgl data\r\n        if (i === 0) {\r\n          webglData[3].push(...toNumber(vertexColor[index]));\r\n        }\r\n      });\r\n    }\r\n\r\n    function resetGeometry() {\r\n      if (geometry) {\r\n        geometry = undefined;\r\n      }\r\n    }\r\n\r\n    function setGeometry() {\r\n      if (!geometry) {\r\n        const position = [];\r\n        const texCord = [];\r\n        const normalCord = [];\r\n        const colorValue = [];\r\n        const tangents = [];\r\n        const biTangent = [];\r\n        webglData = [position, texCord, normalCord, colorValue];\r\n\r\n        geometry = {\r\n          group,\r\n          material,\r\n          tangents,\r\n          biTangent,\r\n          attributes: {\r\n            position,\r\n            texCord,\r\n            normalCord,\r\n            colorValue,\r\n          },\r\n        };\r\n\r\n        geometries.push(geometry);\r\n      }\r\n    }\r\n\r\n    let addMethods = {\r\n      v(data) {\r\n        if (data.length > 3) {\r\n          positionCordinate.push(toNumber(data.slice(0, 3)));\r\n          vertexColor.push(toNumber(data.slice(3)));\r\n        } else {\r\n          positionCordinate.push(toNumber(data));\r\n          vertexColor.push([1, 1, 1]);\r\n        }\r\n      },\r\n      vt(data) {\r\n        textureCordinate.push(toNumber(data));\r\n      },\r\n      vn(data) {\r\n        normalCordinate.push(toNumber(data));\r\n      },\r\n      f(data) {\r\n        setGeometry();\r\n        for (\r\n          let i = 0, traingleCount = data.length - 2;\r\n          i < traingleCount;\r\n          i++\r\n        ) {\r\n          addVertex(data[0]);\r\n          addVertex(data[i + 1]);\r\n          addVertex(data[i + 2]);\r\n        }\r\n      },\r\n      mtllib(data) {\r\n        matLib = data;\r\n      },\r\n      usemtl(data) {\r\n        resetGeometry();\r\n        material = data[0];\r\n      },\r\n      o(data) {\r\n        object = data;\r\n      },\r\n    };\r\n\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n      let line = lines[i].trim();\r\n      if (line === \"\" || line.startsWith(\"#\")) {\r\n        continue;\r\n      }\r\n      let result = regexKeyword.exec(line);\r\n      if (!result) {\r\n        continue;\r\n      }\r\n      const [, keyword, unparsedArgs] = result;\r\n      let datas = line.split(/\\s+/).slice(1);\r\n      const handlerFunction = addMethods[keyword];\r\n      if (!handlerFunction) {\r\n        // console.warn(`${keyword} isnot handled by this program`);\r\n        continue;\r\n      }\r\n      handlerFunction(datas);\r\n    }\r\n  }\r\n\r\n  function geometryRange(data) {\r\n    let min = data.slice(0, 3);\r\n    let max = data.slice(0, 3);\r\n\r\n    for (let i = 0, length = data.length; i < length; i += 3) {\r\n      for (let j = 0; j < 3; j++) {\r\n        min[j] = Math.min(min[j], data[i + j]);\r\n        max[j] = Math.max(max[j], data[i + j]);\r\n      }\r\n    }\r\n    return { min, max };\r\n  }\r\n\r\n  function getRange(geometries) {\r\n    return geometries.reduce(\r\n      ({ min, max }, { attributes }) => {\r\n        const vertexPosition = attributes.position;\r\n        let minMax = geometryRange(vertexPosition);\r\n        return {\r\n          min: min.map((min, index) => Math.min(min, minMax.min[index])),\r\n          max: max.map((max, index) => Math.max(max, minMax.max[index])),\r\n        };\r\n      },\r\n      {\r\n        min: Array(3).fill(Number.POSITIVE_INFINITY),\r\n        max: Array(3).fill(Number.NEGATIVE_INFINITY),\r\n      }\r\n    );\r\n  }\r\n\r\n  async function materialLoader() {\r\n    let materials = {};\r\n    let material;\r\n    let keywords = {\r\n      newmtl(data) {\r\n        material = {};\r\n        materials[data[0]] = material;\r\n      },\r\n      Ns(data) {\r\n        material.shininess = Number(...data);\r\n      },\r\n      Ka(data) {\r\n        material.ambient = data.map(Number);\r\n      },\r\n      Kd(data) {\r\n        material.diffuse = data.map(Number);\r\n      },\r\n      Ks(data) {\r\n        material.specular = data.map(Number);\r\n      },\r\n      Ke(data) {\r\n        material.emissive = data.map(Number);\r\n      },\r\n      Ni(data) {\r\n        material.opticalDensity = Number(...data);\r\n      },\r\n      d(data) {\r\n        material.opacity = Number(...data);\r\n      },\r\n      illum(data) {\r\n        material.illum = Number(...data);\r\n      },\r\n      map_Kd(data) {\r\n        material.diffuseMap = data[0];\r\n      },\r\n      map_Bump(data) {\r\n        material.normalMap = data[0];\r\n      },\r\n      map_Normal(data) {\r\n        material.normalMap = data[0];\r\n      },\r\n      map_Ns(data) {\r\n        console.log(\"specular image\");\r\n        material.specularMap = data[0];\r\n      },\r\n    };\r\n\r\n    function createDefaultTexture() {\r\n      let texture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,\r\n        gl.RGBA,\r\n        1,\r\n        1,\r\n        0,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        new Uint8Array([255, 255, 255, 255])\r\n      );\r\n      return texture;\r\n    }\r\n\r\n    function checkPowerOf2(value) {\r\n      if (value == 0) {\r\n        return false;\r\n      }\r\n      let ceil = Math.ceil(Math.log2(value));\r\n      let floor = Math.floor(Math.log2(value));\r\n      return ceil === floor ? true : false;\r\n    }\r\n\r\n    function loadImage(url, texture) {\r\n      let image = new Image();\r\n      image.src = url;\r\n      image.crossOrigin = \"\";\r\n      image.onload = () => {\r\n        // safe side for large texture, otherwise not needed as we have already binded this above\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(\r\n          gl.TEXTURE_2D,\r\n          0,\r\n          gl.RGBA,\r\n          gl.RGBA,\r\n          gl.UNSIGNED_BYTE,\r\n          image\r\n        );\r\n\r\n        if (checkPowerOf2(image.width) && checkPowerOf2(image.height)) {\r\n          gl.generateMipmap(gl.TEXTURE_2D);\r\n        }\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      };\r\n      return texture;\r\n    }\r\n\r\n    function textureLoader() {\r\n      const textureList = {};\r\n      let texture = createDefaultTexture();\r\n      let materialLists = Object.values(materials);\r\n      materialLists.forEach((material) => {\r\n        Object.entries(material)\r\n          .filter((value) => {\r\n            if (value[0].endsWith(\"Map\")) {\r\n              return true;\r\n            }\r\n          })\r\n          .map(([textureName, textureImage]) => {\r\n            console.log(textureName, textureImage);\r\n            let texturemapped = textureList[textureImage];\r\n            if (!texturemapped) {\r\n              let imageURL = new URL(textureImage, url).href;\r\n              texturemapped = loadImage(imageURL, texture);\r\n              textureList[textureImage] = texturemapped;\r\n            }\r\n            material[textureName] = texturemapped;\r\n          });\r\n        console.log(material);\r\n      });\r\n    }\r\n\r\n    let url = new URL(\r\n      \"/game/resources/models/objs/envy-invidia/source/3D_MNK_XII_A_839_Zawisc.obj\",\r\n      window.location.href\r\n    );\r\n    let materialURL = new URL(matLib, url).href;\r\n    const response = await (await fetch(materialURL)).text();\r\n    const lines = response.split(\"\\n\");\r\n    const regexKeyword = /(\\w*)(?: )*(.*)/;\r\n\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n      const data = lines[i].trim();\r\n      if (data == \"\" || data.startsWith(\"#\")) {\r\n        continue;\r\n      }\r\n      const result = regexKeyword.exec(data);\r\n      if (!result) {\r\n        continue;\r\n      }\r\n      [, keyword, unparsedvalued] = result;\r\n      let datas = data.split(/\\s+/).slice(1);\r\n      let handler = keywords[keyword];\r\n      if (!handler) {\r\n        // console.warn(`${keyword} is uncatched keyword`);\r\n        continue;\r\n      }\r\n\r\n      handler(datas);\r\n    }\r\n    textureLoader();\r\n    return materials;\r\n  }\r\n\r\n  function subArray(a, b) {\r\n    return a.map((value, index) => value - b[index]);\r\n  }\r\n\r\n  function mulArray(a, b) {\r\n    return a.map((value, index) => value * b);\r\n  }\r\n\r\n  function computeTangent() {\r\n    for (let geometry of geometries) {\r\n      const positions = geometry.attributes.position;\r\n      const texCoordinate = geometry.attributes.texCord;\r\n      const verticesCount = positions / 3;\r\n      for (let i = 0, len = positions.length; i < len; i += 3) {\r\n        let v0 = positions.slice(i, i + 3);\r\n        let v1 = positions.slice(i + 3, i + 6);\r\n        let v2 = positions.slice(i + 6, i + 9);\r\n\r\n        let uv0 = texCoordinate.slice(i, i + 2);\r\n        let uv1 = texCoordinate.slice(i + 2, i + 4);\r\n        let uv2 = texCoordinate.slice(i + 4, i + 6);\r\n\r\n        let E1 = subArray(v1, v0);\r\n        let E2 = subArray(v2, v0);\r\n\r\n        let delUV1 = subArray(uv1, uv0);\r\n        let delUV2 = subArray(uv2, uv0);\r\n\r\n        let ifactor = delUV1[0] * delUV2[1] - delUV1[1] * delUV2[0];\r\n        ifactor = 1 / ifactor;\r\n\r\n        let tangent = mulArray(\r\n          subArray(mulArray(E1, delUV2[1]), mulArray(E2, delUV1[1])),\r\n          ifactor\r\n        );\r\n        let biTangent = mulArray(\r\n          subArray(mulArray(E1, delUV2[1]), mulArray(E2, delUV1[1])),\r\n          ifactor\r\n        );\r\n\r\n        geometry.tangents.push(...tangent);\r\n        geometry.tangents.push(...tangent);\r\n        geometry.tangents.push(...tangent);\r\n\r\n        geometry.biTangent.push(...biTangent);\r\n        geometry.biTangent.push(...biTangent);\r\n        geometry.biTangent.push(...biTangent);\r\n      }\r\n    }\r\n  }\r\n  await objLoader();\r\n  materials = await materialLoader();\r\n  computeTangent();\r\n  // await textureLoader();\r\n  let minMax = getRange(geometries);\r\n  console.log(materials);\r\n  return {\r\n    geometries,\r\n    materials,\r\n    minMax,\r\n  };\r\n}\r\n"],"file":"objloader.dev.js"}