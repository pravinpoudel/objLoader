{"version":3,"sources":["objloader.js"],"names":["matLib","geometries","objFileLoader","gl","objLoader","geometryRange","getRange","material","biTangent","normalCord","minMax","regeneratorRuntime","async","_context3","prev","next","_i2","_geometries","length","geometry","positions","attributes","position","texCoordinate","texCord","i","len","_geometry$tangents","_geometry$tangents2","_geometry$tangents3","_geometry$biTangent","_geometry$biTangent2","_geometry$biTangent3","undefined","v1","slice","v2","addVertex","uv1","indices","data","split","forEach","index","E1","subArray","v0","E2","delUV1","uv0","delUV2","uv2","ifactor","tangent","mulArray","toNumber","tangents","push","apply","_toConsumableArray","Number","tempUrl","colorValue","b","materials","keywords","createDefaultTexture","checkPowerOf2","loadImage","textureLoader","url","materialURL","response","lines","regexKeyword","result","_result2","datas","handler","_context2","textureList","texture","max","values","vertexPosition","Object","entries","filter","value","min","map","_ref7","textureName","console","log","textureImage","texturemapped","imageURL","fill","POSITIVE_INFINITY","NEGATIVE_INFINITY","image","Image","src","crossOrigin","onload","texImage2D","TEXTURE_2D","RGBA","UNSIGNED_BYTE","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","Math","log2","keyword","createTexture","bindTexture","Uint8Array","newmtl","illum","map_Kd","diffuseMap","map_Bump","normalMap","map_Normal","map_Ns","Ke","emissive","opticalDensity","d","opacity","specularMap","URL","href","t0","awrap","fetch","t1","sent","text","call","trim","startsWith","abrupt","exec","_slicedToArray","unparsedvalued","setGeometry","group","stop","Ns","shininess","Ka","Kd","Ks","specular","Array","j","webglData","positionCordinate","textureCordinate","normalCordinate","vertexColor","vertexData","resetGeometry","addMethods","line","_result","_keyword","handlerFunction","_context","_webglData$i","a","computeTangent","v","materialLists","endsWith","vt","vn","f","mtllib","o","materialLoader"],"mappings":"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","file":"objloader.min.js","sourcesContent":["let matLib;\r\nlet geometries = [];\r\n\r\nasync function objFileLoader(gl) {\r\n  async function objLoader() {\r\n    let tempUrl =\r\n      \"/game/resources/models/objs/envy-invidia/source/3D_MNK_XII_A_839_Zawisc.obj\";\r\n    // tempUrl =\r\n    //   \"https://webglfundamentals.org/webgl/resources/models/windmill/windmill.obj\";\r\n    const response = await fetch(tempUrl);\r\n    const text = await response.text();\r\n    const lines = text.split(\"\\n\");\r\n    const regexKeyword = /(\\w*)(?: )*(.*)/;\r\n    let material = \"basic\";\r\n    let object = \"default\";\r\n    let group = \"\";\r\n    let verticesIndices = [];\r\n\r\n    let geometry;\r\n\r\n    let webglData = [[], [], [], []];\r\n\r\n    let positionCordinate = [[0, 0, 0]];\r\n    let textureCordinate = [[0, 0]];\r\n    let normalCordinate = [[0, 0, 0]];\r\n    let vertexColor = [[0, 0, 0]];\r\n\r\n    let vertexData = [\r\n      positionCordinate,\r\n      textureCordinate,\r\n      normalCordinate,\r\n      vertexColor,\r\n    ];\r\n\r\n    function toNumber(a) {\r\n      return a.map((value) => Number(value));\r\n    }\r\n\r\n    function addVertex(data) {\r\n      let indices = data.split(\"/\");\r\n      indices.forEach((index, i) => {\r\n        if (!index) {\r\n          return;\r\n        }\r\n        index = index > 0 ? index : index + vertexData[i].length;\r\n        webglData[i].push(...toNumber(vertexData[i][index]));\r\n        // add color value of that vertex which is i=0 to the webgl data\r\n        if (i === 0) {\r\n          webglData[3].push(...toNumber(vertexColor[index]));\r\n        }\r\n      });\r\n    }\r\n\r\n    function resetGeometry() {\r\n      if (geometry) {\r\n        geometry = undefined;\r\n      }\r\n    }\r\n\r\n    function setGeometry() {\r\n      if (!geometry) {\r\n        const position = [];\r\n        const texCord = [];\r\n        const normalCord = [];\r\n        const colorValue = [];\r\n        const tangents = [];\r\n        const biTangent = [];\r\n        webglData = [position, texCord, normalCord, colorValue];\r\n\r\n        geometry = {\r\n          group,\r\n          material,\r\n          tangents,\r\n          biTangent,\r\n          attributes: {\r\n            position,\r\n            texCord,\r\n            normalCord,\r\n            colorValue,\r\n          },\r\n        };\r\n\r\n        geometries.push(geometry);\r\n      }\r\n    }\r\n\r\n    let addMethods = {\r\n      v(data) {\r\n        if (data.length > 3) {\r\n          positionCordinate.push(toNumber(data.slice(0, 3)));\r\n          vertexColor.push(toNumber(data.slice(3)));\r\n        } else {\r\n          positionCordinate.push(toNumber(data));\r\n          vertexColor.push([1, 1, 1]);\r\n        }\r\n      },\r\n      vt(data) {\r\n        textureCordinate.push(toNumber(data));\r\n      },\r\n      vn(data) {\r\n        normalCordinate.push(toNumber(data));\r\n      },\r\n      f(data) {\r\n        setGeometry();\r\n        for (\r\n          let i = 0, traingleCount = data.length - 2;\r\n          i < traingleCount;\r\n          i++\r\n        ) {\r\n          addVertex(data[0]);\r\n          addVertex(data[i + 1]);\r\n          addVertex(data[i + 2]);\r\n        }\r\n      },\r\n      mtllib(data) {\r\n        matLib = data;\r\n      },\r\n      usemtl(data) {\r\n        resetGeometry();\r\n        material = data[0];\r\n      },\r\n      o(data) {\r\n        object = data;\r\n      },\r\n    };\r\n\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n      let line = lines[i].trim();\r\n      if (line === \"\" || line.startsWith(\"#\")) {\r\n        continue;\r\n      }\r\n      let result = regexKeyword.exec(line);\r\n      if (!result) {\r\n        continue;\r\n      }\r\n      const [, keyword, unparsedArgs] = result;\r\n      let datas = line.split(/\\s+/).slice(1);\r\n      const handlerFunction = addMethods[keyword];\r\n      if (!handlerFunction) {\r\n        // console.warn(`${keyword} isnot handled by this program`);\r\n        continue;\r\n      }\r\n      handlerFunction(datas);\r\n    }\r\n  }\r\n\r\n  function geometryRange(data) {\r\n    let min = data.slice(0, 3);\r\n    let max = data.slice(0, 3);\r\n\r\n    for (let i = 0, length = data.length; i < length; i += 3) {\r\n      for (let j = 0; j < 3; j++) {\r\n        min[j] = Math.min(min[j], data[i + j]);\r\n        max[j] = Math.max(max[j], data[i + j]);\r\n      }\r\n    }\r\n    return { min, max };\r\n  }\r\n\r\n  function getRange(geometries) {\r\n    return geometries.reduce(\r\n      ({ min, max }, { attributes }) => {\r\n        const vertexPosition = attributes.position;\r\n        let minMax = geometryRange(vertexPosition);\r\n        return {\r\n          min: min.map((min, index) => Math.min(min, minMax.min[index])),\r\n          max: max.map((max, index) => Math.max(max, minMax.max[index])),\r\n        };\r\n      },\r\n      {\r\n        min: Array(3).fill(Number.POSITIVE_INFINITY),\r\n        max: Array(3).fill(Number.NEGATIVE_INFINITY),\r\n      }\r\n    );\r\n  }\r\n\r\n  async function materialLoader() {\r\n    let materials = {};\r\n    let material;\r\n    let keywords = {\r\n      newmtl(data) {\r\n        material = {};\r\n        materials[data[0]] = material;\r\n      },\r\n      Ns(data) {\r\n        material.shininess = Number(...data);\r\n      },\r\n      Ka(data) {\r\n        material.ambient = data.map(Number);\r\n      },\r\n      Kd(data) {\r\n        material.diffuse = data.map(Number);\r\n      },\r\n      Ks(data) {\r\n        material.specular = data.map(Number);\r\n      },\r\n      Ke(data) {\r\n        material.emissive = data.map(Number);\r\n      },\r\n      Ni(data) {\r\n        material.opticalDensity = Number(...data);\r\n      },\r\n      d(data) {\r\n        material.opacity = Number(...data);\r\n      },\r\n      illum(data) {\r\n        material.illum = Number(...data);\r\n      },\r\n      map_Kd(data) {\r\n        material.diffuseMap = data[0];\r\n      },\r\n      map_Bump(data) {\r\n        material.normalMap = data[0];\r\n      },\r\n      map_Normal(data) {\r\n        material.normalMap = data[0];\r\n      },\r\n      map_Ns(data) {\r\n        console.log(\"specular image\");\r\n        material.specularMap = data[0];\r\n      },\r\n    };\r\n\r\n    function createDefaultTexture() {\r\n      let texture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,\r\n        gl.RGBA,\r\n        1,\r\n        1,\r\n        0,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        new Uint8Array([255, 255, 255, 255])\r\n      );\r\n      return texture;\r\n    }\r\n\r\n    function checkPowerOf2(value) {\r\n      if (value == 0) {\r\n        return false;\r\n      }\r\n      let ceil = Math.ceil(Math.log2(value));\r\n      let floor = Math.floor(Math.log2(value));\r\n      return ceil === floor ? true : false;\r\n    }\r\n\r\n    function loadImage(url, texture) {\r\n      let image = new Image();\r\n      image.src = url;\r\n      image.crossOrigin = \"\";\r\n      image.onload = () => {\r\n        // safe side for large texture, otherwise not needed as we have already binded this above\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texImage2D(\r\n          gl.TEXTURE_2D,\r\n          0,\r\n          gl.RGBA,\r\n          gl.RGBA,\r\n          gl.UNSIGNED_BYTE,\r\n          image\r\n        );\r\n\r\n        if (checkPowerOf2(image.width) && checkPowerOf2(image.height)) {\r\n          gl.generateMipmap(gl.TEXTURE_2D);\r\n        }\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      };\r\n      return texture;\r\n    }\r\n\r\n    function textureLoader() {\r\n      const textureList = {};\r\n      let texture = createDefaultTexture();\r\n      let materialLists = Object.values(materials);\r\n      materialLists.forEach((material) => {\r\n        Object.entries(material)\r\n          .filter((value) => {\r\n            if (value[0].endsWith(\"Map\")) {\r\n              return true;\r\n            }\r\n          })\r\n          .map(([textureName, textureImage]) => {\r\n            console.log(textureName, textureImage);\r\n            let texturemapped = textureList[textureImage];\r\n            if (!texturemapped) {\r\n              let imageURL = new URL(textureImage, url).href;\r\n              texturemapped = loadImage(imageURL, texture);\r\n              textureList[textureImage] = texturemapped;\r\n            }\r\n            material[textureName] = texturemapped;\r\n          });\r\n        console.log(material);\r\n      });\r\n    }\r\n\r\n    let url = new URL(\r\n      \"/game/resources/models/objs/envy-invidia/source/3D_MNK_XII_A_839_Zawisc.obj\",\r\n      window.location.href\r\n    );\r\n    let materialURL = new URL(matLib, url).href;\r\n    const response = await (await fetch(materialURL)).text();\r\n    const lines = response.split(\"\\n\");\r\n    const regexKeyword = /(\\w*)(?: )*(.*)/;\r\n\r\n    for (let i = 0, length = lines.length; i < length; i++) {\r\n      const data = lines[i].trim();\r\n      if (data == \"\" || data.startsWith(\"#\")) {\r\n        continue;\r\n      }\r\n      const result = regexKeyword.exec(data);\r\n      if (!result) {\r\n        continue;\r\n      }\r\n      [, keyword, unparsedvalued] = result;\r\n      let datas = data.split(/\\s+/).slice(1);\r\n      let handler = keywords[keyword];\r\n      if (!handler) {\r\n        // console.warn(`${keyword} is uncatched keyword`);\r\n        continue;\r\n      }\r\n\r\n      handler(datas);\r\n    }\r\n    textureLoader();\r\n    return materials;\r\n  }\r\n\r\n  function subArray(a, b) {\r\n    return a.map((value, index) => value - b[index]);\r\n  }\r\n\r\n  function mulArray(a, b) {\r\n    return a.map((value, index) => value * b);\r\n  }\r\n\r\n  function computeTangent() {\r\n    for (let geometry of geometries) {\r\n      const positions = geometry.attributes.position;\r\n      const texCoordinate = geometry.attributes.texCord;\r\n      const verticesCount = positions / 3;\r\n      for (let i = 0, len = positions.length; i < len; i += 3) {\r\n        let v0 = positions.slice(i, i + 3);\r\n        let v1 = positions.slice(i + 3, i + 6);\r\n        let v2 = positions.slice(i + 6, i + 9);\r\n\r\n        let uv0 = texCoordinate.slice(i, i + 2);\r\n        let uv1 = texCoordinate.slice(i + 2, i + 4);\r\n        let uv2 = texCoordinate.slice(i + 4, i + 6);\r\n\r\n        let E1 = subArray(v1, v0);\r\n        let E2 = subArray(v2, v0);\r\n\r\n        let delUV1 = subArray(uv1, uv0);\r\n        let delUV2 = subArray(uv2, uv0);\r\n\r\n        let ifactor = delUV1[0] * delUV2[1] - delUV1[1] * delUV2[0];\r\n        ifactor = 1 / ifactor;\r\n\r\n        let tangent = mulArray(\r\n          subArray(mulArray(E1, delUV2[1]), mulArray(E2, delUV1[1])),\r\n          ifactor\r\n        );\r\n        let biTangent = mulArray(\r\n          subArray(mulArray(E1, delUV2[1]), mulArray(E2, delUV1[1])),\r\n          ifactor\r\n        );\r\n\r\n        geometry.tangents.push(...tangent);\r\n        geometry.tangents.push(...tangent);\r\n        geometry.tangents.push(...tangent);\r\n\r\n        geometry.biTangent.push(...biTangent);\r\n        geometry.biTangent.push(...biTangent);\r\n        geometry.biTangent.push(...biTangent);\r\n      }\r\n    }\r\n  }\r\n  await objLoader();\r\n  materials = await materialLoader();\r\n  computeTangent();\r\n  // await textureLoader();\r\n  let minMax = getRange(geometries);\r\n  console.log(materials);\r\n  return {\r\n    geometries,\r\n    materials,\r\n    minMax,\r\n  };\r\n}\r\n"]}